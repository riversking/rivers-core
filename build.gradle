plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.vanniktech.maven.publish" version "0.30.0"
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'signing'
}

import com.vanniktech.maven.publish.SonatypeHost

group = 'io.github.riversking'
version = '1.0.11'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForPluginMavenPublication }
        rename ".*", "pom.xml"
    }
    enabled = true
    bootJar.enabled = false
    archiveClassifier = ''
    manifest {
        attributes('Implementation-Title': 'Gradle',
                'Implementation-Version': archiveVersion)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenLocal()
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
    set('springCloudNacosVersion', "2025.0.0.0-preview")
    set('mybatisPlusVersion', "3.5.14")
}

dependencies {
    api 'com.google.guava:guava:33.4.0-jre'
    api 'org.apache.commons:commons-lang3:3.18.0'
    api 'org.apache.commons:commons-collections4:4.4'
    api 'commons-codec:commons-codec:1.19.0'
    api 'commons-io:commons-io:2.14.0'
    api 'com.alibaba:fastjson:2.0.58'
    api 'cn.hutool:hutool-all:5.8.40'
    api 'org.projectlombok:lombok'
    api 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    api platform('com.alibaba.cloud:spring-cloud-alibaba-dependencies:2025.0.0.0-preview')
    api 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
    api 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
    api platform('com.baomidou:mybatis-plus-bom:3.5.14')
    api 'com.baomidou:mybatis-plus-spring-boot3-starter'
    api 'com.baomidou:mybatis-plus-jsqlparser'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    api 'io.jsonwebtoken:jjwt:0.13.0'
    api 'org.hashids:hashids:1.0.3'
    api 'org.springframework:spring-web'
    api 'org.springframework.cloud:spring-cloud-bus'
    api 'com.google.protobuf:protobuf-java:4.29.5'
    api 'com.googlecode.protobuf-java-format:protobuf-java-format:1.4'
    api 'com.google.protobuf:protobuf-java-util:4.29.5'
    annotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


//防止乱码
tasks.withType(Javadoc).configureEach {
    options.version = true
    options.author = true
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"  //解决中文乱码
}


mavenPublishing {
    // 配置坐标,参数一要和命名空间一致，参二为项目名(GroupId),参三为版本号 "1.0.0"
    coordinates("io.github.riversking", "rivers-core", "1.0.11.2")
    // 配置 pom 文件信息
    pom {
        // 项目名
        name = "rivers-core"
        // 项目描述
        description = "timer核心"
        // 项目主页
        url = "https://github.com/riversking"
        //开源许可
        licenses {
            license {
                name = "LGPL-3.0 license"
                url = "https://www.gnu.org/licenses/lgpl-3.0.html"
                distribution = "https://www.gnu.org/licenses/lgpl-3.0.html"
            }
        }
        //开发者信息
        developers {
            developer {
                name = "riversking"
                url = "https://github.com/riversking"
                email = "kingjames-6236@hotmail.com"
            }
        }
        //照着仓库地址填写
        scm {
            connection = "scm:git:git:github.com/riversking/riversking.github.io.git"
            developerConnection = "scm:git:ssh:github.com/riversking/riversking.github.io.git"
            url = "https://github.com/riversking/riversking.github.io.git"
        }
    }
    // 发布到 Sonatype, 参数为 sonatype host,还可以是 SonatypeHost.DEFAULT,SonatypeHost.S0
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, false)
    //进行签名
    signAllPublications()
}